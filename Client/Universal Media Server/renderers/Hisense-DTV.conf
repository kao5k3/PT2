
RendererName=Hisense DTV
#RendererIcon=panasonic.png
#RendererIcon=RegzaZ2.png
RendererIcon=Samsung-J55xx.png

#UserAgent: regular expression to detect the connected renderer
UserAgentSearch=UPnP/1.0 DLNADOC/1.50 Intel_SDK_for_UPnP_devices/1.2

#Basic capabilities
Video=true
Audio=true
Image=true

#------------------------------------------------------------
# DLNA settings

#Use the DLNA feature seek by time and not by range
SeekByTime=false
#SeekByTime=true

#Serve different flavors of localization in the DLNA parameters (PAL/NTSC, NA/EU/JP)
#to allow every worldwide renderer to see the files. Important for Sony Bravia's TVs
DLNALocalizationRequired=true

#DLNAProfileChanges=MPEG_TS_HD_60_L2=MPEG_PS_NTSC|AVC_TS_HD_60_AC3=MPEG_PS_NTSC|MPEG_TS_SD_JP=MPEG_PS_NTSC|MPEG_TS_SD_JP_ISO=MPEG_PS_NTSC|AVC_TS_SD_24_AC3=MPEG_PS_NTSC|AVC_TS_HD_50_AC3=MPEG_PS_NTSC|AVC_TS_HD_24_AC3_ISO=AVC_TS_HD_60_AC3_T

DLNAProfileChanges=MPEG_TS_HD_60_L2=MPEG_PS_NTSC|AVC_TS_HD_60_AC3=MPEG_PS_NTSC|MPEG_TS_SD_JP=MPEG_PS_NTSC|MPEG_TS_SD_JP_ISO=MPEG_PS_NTSC|AVC_TS_SD_24_AC3=MPEG_PS_NTSC|AVC_TS_HD_50_AC3=MPEG_PS_NTSC|AVC_TS_HD_24_AC3_ISO=MPEG_PS_NTSC

#------------------------------------------------------------
# Transcoding/Muxing capabilities
#

#Transcode codecs for video and audio engines
#currently supported: MPEGAC3, MPEGTSAC3 or WMV for video, PCM or MP3 for audio
#--------------------------------------------------------
# Memo: MPEGTS-H264-AC3: On REGZA-Z2, become unplayable remux/direct, and transcode starts with delayed-video.
#--------------------------------------------------------
#TranscodeVideo=MPEGTS-H264-AC3
#TranscodeVideo=MPEGTSAC3
TranscodeVideo=MPEGAC3

TranscodeAudio=LPCM

#Use default DVD buffer size: false = greater bitrate and faster encoding,
#but can generate incompatible videos, depends of your media renderer
DefaultVBVBufSize=true

#Muxing capabilities: Does the media renderer supports H264 and MPEG2 in a mpegts file ?
#Deprecated if MediaInfo=true
MuxH264ToMpegTS=true

#Does the media renderer supports DTS in a mpeg file ?
#Deprecated if MediaInfo=true
MuxDTSToMpeg=false

#Does the media renderer supports DTS wrapped into LPCM in a mpeg file ?
WrapDTSIntoPCM=false

#Does the media renderer supports LPCM in a mpeg file ?
#Deprecated if MediaInfo=true
MuxLPCMToMpeg=false

#Maximum bitrate supported by the media renderer (0=unlimited)
MaxVideoBitrateMbps=0

#Max Width and Height supported by the media renderer (0=unlimited)
MaxVideoWidth=1920
MaxVideoHeight=1080

#Does the media renderer supports only H264 L4.1 at most ?
H264Level41Limited=true

#Does music files need to be resampled at 44.1kHz?
TranscodeAudioTo441kHz=false

#Does the client need to receive transcoded video with minimal delay ? (Useful when the client has a small timeout delay)
TranscodeFastStart=true

#Size of the transcoded file (unknown length) sent to the renderer (could determine browsing failure/success)
#Possible values: 
#           -1: Specific value working with the PS3, means perfect transcoding and copying support (it's against the dlna spec though)
#            0: size attribute is NOT sent to the renderer (defaut value if this parameter isn't used)
# 100000000000: 100Gb, if you want to be sure that the media file is not cutted before the end ?
#TranscodedVideoFileSize=-1
TranscodedVideoFileSize=100000000000

#-----------------------------------------------------------
# Misc Images

#Rotate Jpeg files based on EXIF infos
AutoExifRotate=true

#------------------------------------------------------------
# Misc Files

# Mime types transforms (oldmime=newmime|olemime2=newmime2|...)
# Deprecated if MediaInfo=true
MimeTypesChanges=audio/wav=audio/L16|video/mp4=video/mpeg|video/ts=video/mpeg
MpegTTS_MimeType=video/vnd.dlna.mpeg-tts

# What extensions are forcefully transcoded
# Don't use this if MediaInfo=true, prefer codec configurations
#TranscodeExtensions=dvr-ms,dvr,mkv,dv,ty,mov,ogm,hdmov,hdm,rmv,rmvb,rm,asf,evo,asx,flv,m2v,mpe,mod,tivo,ty,tmf,tp,m2p,mp4,m4v,avi,wmv,wmx,wm,divx,div,flac,mlp,fla,wma,m4a,aac,dts,mka,ape,ogg,shn,mpc,ra,mp2,wv,oma,aa3,gif,png,arw,cr2,crw,dng,raf,mrw,nef,pef,tif,tiff

# What extensions are forcefully streamed as is (and not transcoded)
# Don't use this if MediaInfo=true, prefer codec configurations
StreamExtensions=m2ts,ts,mpg,mpeg,jpg,jpeg,mp4


# ===========================================================================
# All supported media formats of this renderer (the rest will be transcoded)
# First steps towards a faster/proper file/codec/mimetype management system (false by default)
# 1- Parse files with mediainfo on Windows/OSX (Linux too if libmediainfo and libzen installed)
# 2- Deprecate following parameters: MuxH264ToMpegTS,MuxDTSToMpeg,MuxLPCMToMpeg,MimeTypesChanges
# 3- The server will skip badly parsed, corrupted files or wrong coding, preventing potential playback errors
# 4- Faster browsing, due to the launch of ffmpeg/mplayer first thumbnailer process with each http client request, rather than in the browse DLNA request
MediaInfo=true
# The media parser and this configuration file will recognize the following formats/codecs (lowercase only, regex supported):
# Chosen from the most common used and supported formats/codecs (no need to manage ADPCM, nobody cares)
#        mpegps		(mpeg presentation stream, used in DVD Videos, VCDs, etc.)
#        mpegts		(mpeg transport stream, used in sat tv, blu rays, etc.)
#        wmv		(Windows Media Video, tag also used for asf files)
#        avi		(AVI container)
#        mp4		(ISOM/MPEG4 container, or MPEG4 codec)
#        mov		(Quicktime container, Apple)
#        flv		(Flash Video)
#        rm			(Real Media, RMVB)
#        mkv		(Matroska)
#        wav		(WAVE file)
#        wavpac		(WavPack)
#        lpcm		(Linear PCM)
#        aac		(Advanced Audio Codec)
#        ac3		(Audio Coding 3)
#        mp3		(Mpeg Audio Layer 3)
#        mpa		(Mpeg Audio)
#        ogg		(Ogg Vorbis)
#        wma		(Windows Media Audio)
#        dts		(Digital Theater Systems)
#        dtshd		(Digital Theater Systems)
#        truehd		(TrueHD)
#        eac3		(Extended AC3)
#        atrac		(Atrac)
#        flac		(Free Lossless Audio Codec)
#        ape		(Monkey's Audio)
#        ra			(Real Audio)
#        mpc		(MusePack)
#        aiff		(AIFF)
#        alac		(Apple Lossless)
#        dv			(Digital Video)
#        mpeg1		(Codec used in VCD)
#        mpeg2		(Codec used in DVD Videos and HDTV)
#        divx		(DivX Video)
#        h264		(H264)
#        mjpeg		(M-JPEG)
#        vc1		(VC-1)
#        jpg		(Jpeg)
#        png		(PNG)
#        gif		(GIF)
#        tiff		(TIFF)
#        bmp		(Bitmap)
#        und		(Undetermined, if the parser did not recognize one of above)
# Usage:
#    f: format, MANDATORY (the only conf for a 'eat everything' renderer would be f:.+)
#    m: mimetype, STRONGLY RECOMMENDED (if not declared, an estimated value is assigned)
#    v: video codec
#    a: audio codec
#    n: max nb of audio channels
#    s: max audio sample frequency in Hz
#    b: max audio bitrate in bps
#    w: max width in pixels
#    h: max height in pixels
#    other flags: right now, only qpel and gmc (see avi)

# In case of multiple matches, the first mime type of the list is the used one.
# Be careful with regexps such as .+ : You shouldn't use these only if you're sure your renderer is quite versatile

# Taken from the playstation site:
#    The following types of files can be played under  (Video).
#    Memory Stick Video Format
#    - MPEG-4 SP (AAC LC)
#    - H.264/MPEG-4 AVC High Profile (AAC LC)
#    - MPEG-2 TS(H.264/MPEG-4 AVC, AAC LC)
#    MP4 file format
#    - H.264/MPEG-4 AVC High Profile (AAC LC)
#    MPEG-1 (MPEG Audio Layer 2)
#    MPEG-2 PS (MPEG2 Audio Layer 2, AAC LC, AC3(Dolby Digital), LPCM)
#    MPEG-2 TS (MPEG2 Audio Layer 2, AC3(Dolby Digital), AAC LC)
#    MPEG-2 TS (H.264/MPEG-4 AVC, AAC LC)
#    AVI
#    - Motion JPEG (Linear PCM)
#    - Motion JPEG (mu-Law)
#    AVCHD (.m2ts / .mts)
#    DivX
#    WMV
#    - VC-1(WMA Standard V2)
#
# gives:

# [Supported video formats]: 
Supported = f:mpegps    v:mpeg2|mp4|h264    a:ac3|lpcm|aac|mpa	m:video/mpeg
Supported = f:mpegts    v:mpeg2|mp4|h264    a:ac3|lpcm|aac|mpa	m:video/mpeg:DLNA.ORG_PN=MPEG_PS_NTSC;DLNA.ORG_OP=11
Supported = f:mp4             v:mp4|h264               a:ac3|mpa                                       m:video/mp4:DLNA.ORG_PN=AVC_MP4_BL_L31_HD_AAC;DLNA.ORG_OP=11
Supported = f:mp4             v:mp4|h264               a:aac-lc                                  n:2   m:video/mp4:DLNA.ORG_PN=AVC_MP4_BL_L31_HD_AAC;DLNA.ORG_OP=11

# [Supported audio formats]:
Supported = f:mp3	m:audio/mpeg
Supported = f:wav	m:audio/L16

# [Supported image formats]
Supported = f:jpg	m:image/jpeg

# ===========================================================================
# Overrides the FFmpeg custom options in UMS for this renderer. Default is
# empty, which means the UMS settings will be used.
# All setting for output formats, codecs, bitrate e.g. can be used except video,
# audio and subs mapping (-map).
# Do not use it to override -vf; use OverrideVideoFilter instead.
# Default: ""

CustomFFmpegOptions = 

# Overrides the scale and pad part of FFmpeg VideoFilter options in UMS for this
# renderer. It leaves all internal VideoFilter setting for subtitles untouched.
# Do not use -vf in this option, and add only VideoFilter parameters (filters)
# separated by commas. Commas inside the filters are taken as a break so they
# must have a prefix.
# Example: OverrideFFmpegVideoFilter = pad=max(iw\\,ih*16/9)
# Default: ""

# filterGraph pad="width:height:pos_w:pos_h"  
#   --- width:height: new picture size after padding
#   --- pos_w:pos_h : original picture's shift values in new picture area (default is center)
#OverrideFFmpegVideoFilter = pad ="ih*16/9/sar:ih:(ow-iw)/2:(oh-ih)/2",scale=1280x720
#OverrideFFmpegVideoFilter = pad="(ih+1)*16/9/sar:ih:(ow-iw)/2:(oh-ih)/2",scale=1280x720,setdar=16:9
#OverrideFFmpegVideoFilter = pad='if(gt(ih/iw,1.8),(if(gt(iw,(ih+1)*16/9/sar),iw,(ih+1)*16/9/sar)),iw)':'if(gt(ih/iw,1.8),ih,iw*9/16*sar)':'if(gt(ow,iw),(ow-iw)/2,0)':'if(gt(oh,ih),(oh-ih)/2,0)',scale=1280x720,setdar=16:9

#---- ffmpeg Transcode with rtaining aspect ratio 
#OverrideFFmpegVideoFilter = scale='if(gt(dar,16/9),1280,720*dar)':'if(gt(dar,16/9),1280/dar,720)',crop='if(gt(iw,1280),1280,iw)':'if(gt(ih,720),720,ih)',pad=1280:720:'if(gt(1280,iw),(1280-iw)/2,0)':'if(gt(720,ih),(720-ih)/2,0)'
OverrideFFmpegVideoFilter = scale='if(gt(dar,16/9),1280,720*dar)':'if(gt(dar,16/9),1280/dar,720)',crop='if(gt(iw,1280),1280,iw)':'if(gt(ih,720),720,ih)',pad=1280:720:'if(gt(1280,iw),(1280-iw)/2,0)':'if(gt(720,ih),(720-ih)/2,0)'

# ===========================================================================

